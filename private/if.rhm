#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "lazy.rhm" open
  "block.rhm".implicit_block

export:
  rename:
    shif as if
    shcond as cond

expr.macro 'shif $tst ...
            | $thn_body
            | $els_body':
  ~op_stx self
  ~all_stx stx
  let '$(tst :: expr_meta.Parsed)':
    match '$tst ...'
    | '': syntax_meta.error("missing test expression", self)
    | other: other
  let '$(thn :: expr_meta.Parsed)' = 'implicit_block: $thn_body'
  let '$(els :: expr_meta.Parsed)' = 'implicit_block: $els_body'
  let tv = t.gen_tvar(#false)
  let [tst_ty, new_tst] = t_s.lookup_type(tst, tst.group)
  let [thn_ty, new_thn] = t_s.lookup_type(thn, thn.group)
  let [els_ty, new_els] = t_s.lookup_type(els, els.group)
  t.unify_do(tst, t.Bool(self), tst_ty)
  t.unify_do(tst, thn_ty, tv)
  t.unify_do(tst, els_ty, tv)
  t_s.wrap_type('if force($new_tst) | $new_thn | $new_els', stx, tv)

expr.macro
| 'shcond
   | $tst ...:
       $body
   | ...
   | ~else:
       $els':
    ~op_stx self
    ~all_stx stx
    let '[$(tst :: expr_meta.Parsed), ...]' = '[$tst ..., ...]'
    let '[$(body :: expr_meta.Parsed), ...]' = '[implicit_block: $body, ...]'
    let '$(els :: expr_meta.Parsed)' = 'implicit_block: $els'
    let [[tst_ty, new_tst], ...] = [t_s.lookup_type(tst, tst.group), ...]
    let [[body_ty, new_body], ...] = [t_s.lookup_type(body, body.group), ...]
    let [els_ty, new_els] = t_s.lookup_type(els, els.group)
    let tv = t.gen_tvar(#false)
    Function.pass(t.unify_do(tst, t.Bool(self), tst_ty), ...)
    Function.pass(t.unify_do(tst, tv, body_ty), ...)
    t.unify_do(els, tv, els_ty)
    t_s.wrap_type('$('cond'.relocate(self))
                   | force($new_tst): $new_body
                   | ...
                   | ~else: $new_els',
                  stx,
                  tv)
| 'shcond
   | $tst ...:
       $body
   | ...':
    ~op_stx self
    ~all_stx stx
    let '[$(tst :: expr_meta.Parsed), ...]' = '[$tst ..., ...]'
    let '[$(body :: expr_meta.Parsed), ...]' = '[implicit_block: $body, ...]'
    let tv = t.gen_tvar(self)
    let [[tst_ty, new_tst], ...] = [t_s.lookup_type(tst, tst.group), ...]
    let [[body_ty, new_body], ...] = [t_s.lookup_type(body, body.group), ...]
    Function.pass(t.unify_do(tst, t.Bool(self), tst_ty), ...)
    Function.pass(t.unify_do(tst, tv, body_ty), ...)
    t_s.wrap_type('$('cond'.relocate(self))
                   | force($new_tst): $new_body
                   | ...',
                  stx,
                  tv)
